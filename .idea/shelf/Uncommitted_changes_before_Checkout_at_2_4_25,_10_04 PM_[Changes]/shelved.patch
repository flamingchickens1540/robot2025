Index: src/main/java/org/team1540/robot2025/subsystems/elevator/ElevatorIOTalonFX.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.team1540.robot2025.subsystems.elevator;\n\nimport static org.team1540.robot2025.subsystems.elevator.ElevatorConstants.*;\n\nimport com.ctre.phoenix6.BaseStatusSignal;\nimport com.ctre.phoenix6.StatusCode;\nimport com.ctre.phoenix6.StatusSignal;\nimport com.ctre.phoenix6.configs.Slot0Configs;\nimport com.ctre.phoenix6.configs.TalonFXConfiguration;\nimport com.ctre.phoenix6.controls.Follower;\nimport com.ctre.phoenix6.controls.MotionMagicVoltage;\nimport com.ctre.phoenix6.hardware.TalonFX;\nimport com.ctre.phoenix6.signals.ConnectedMotorValue;\nimport com.ctre.phoenix6.signals.GravityTypeValue;\nimport com.ctre.phoenix6.signals.InvertedValue;\nimport com.ctre.phoenix6.signals.NeutralModeValue;\nimport edu.wpi.first.math.filter.Debouncer;\nimport edu.wpi.first.units.measure.*;\nimport edu.wpi.first.wpilibj.DigitalInput;\n\npublic class ElevatorIOTalonFX implements ElevatorIO {\n\n    private final MotionMagicVoltage profiledPositionControl = new MotionMagicVoltage(0.0).withEnableFOC(true);\n\n    // Leader Elevator Motor\n    private final TalonFX leader = new TalonFX(LEADER_ID);\n    private final StatusSignal<AngularVelocity> leaderVelocity = leader.getVelocity();\n    private final StatusSignal<Angle> leaderPosition = leader.getPosition();\n    private final StatusSignal<Voltage> leaderAppliedVoltage = leader.getMotorVoltage();\n    private final StatusSignal<Current> leaderSupplyCurrent = leader.getSupplyCurrent();\n    private final StatusSignal<Temperature> leaderTemp = leader.getDeviceTemp();\n    private final StatusSignal<Current> leaderStatorCurrent = leader.getStatorCurrent();\n\n    // Follower Elevator Motor\n    private final TalonFX follower = new TalonFX(FOLLOWER_ID);\n    private final StatusSignal<Voltage> followerAppliedVoltage = follower.getMotorVoltage();\n    private final StatusSignal<Current> followerSupplyCurrent = follower.getSupplyCurrent();\n    private final StatusSignal<Temperature> followerTemp = follower.getDeviceTemp();\n    private final StatusSignal<Angle> followerPosition = follower.getPosition();\n    private final StatusSignal<AngularVelocity> followerVelocity = follower.getVelocity();\n    private final StatusSignal<Current> followerStatorCurrent = follower.getStatorCurrent();\n\n    private final Follower followerControl = new Follower(LEADER_ID, true);\n    private final DigitalInput upperLimitSwitch = new DigitalInput(UPPER_LIMIT_ID);\n    private final DigitalInput lowerLimitSwitch = new DigitalInput(LOWER_LIMIT_ID);\n\n    private final Debouncer leaderDebouncer = new Debouncer(0.5);\n    private final Debouncer followerDebouncer = new Debouncer(0.5);\n\n    public ElevatorIOTalonFX() {\n        TalonFXConfiguration config = new TalonFXConfiguration();\n\n        config.MotorOutput.NeutralMode = NeutralModeValue.Brake;\n        config.MotorOutput.Inverted = InvertedValue.Clockwise_Positive;\n        config.Feedback.SensorToMechanismRatio = MOTOR_ROTS_PER_METER;\n\n        config.CurrentLimits.SupplyCurrentLimitEnable = true;\n        config.CurrentLimits.SupplyCurrentLimit = 70.0;\n        config.CurrentLimits.SupplyCurrentLowerLimit = 40.0;\n        config.CurrentLimits.SupplyCurrentLowerTime = 0.5;\n\n        config.Slot0.kP = KP;\n        config.Slot0.kI = KI;\n        config.Slot0.kD = KD;\n        config.Slot0.kS = KS;\n        config.Slot0.kV = KV;\n        config.Slot0.kA = KA;\n        config.Slot0.kG = KG;\n        config.Slot0.GravityType = GravityTypeValue.Elevator_Static;\n\n        config.MotionMagic.MotionMagicCruiseVelocity = 1;\n        config.MotionMagic.MotionMagicAcceleration = 2;\n\n        leader.getConfigurator().apply(config);\n        follower.getConfigurator().apply(config);\n        follower.setControl(followerControl);\n\n        BaseStatusSignal.setUpdateFrequencyForAll(\n                50.0,\n                leaderPosition,\n                followerPosition,\n                leaderVelocity,\n                followerVelocity,\n                leaderAppliedVoltage,\n                followerAppliedVoltage,\n                leaderSupplyCurrent,\n                followerSupplyCurrent,\n                leaderStatorCurrent,\n                followerStatorCurrent,\n                leaderTemp,\n                followerTemp);\n\n        leader.optimizeBusUtilization();\n        follower.optimizeBusUtilization();\n    }\n\n    @Override\n    public void updateInputs(ElevatorIOInputs inputs) {\n        StatusCode leaderStatus = BaseStatusSignal.refreshAll(\n                leaderPosition,\n                leaderVelocity,\n                leaderAppliedVoltage,\n                leaderSupplyCurrent,\n                leaderStatorCurrent,\n                leaderTemp\n                );\n        StatusCode followerStatus = BaseStatusSignal.refreshAll(\n                followerPosition,\n                followerVelocity,\n                followerAppliedVoltage,\n                followerSupplyCurrent,\n                followerStatorCurrent,\n                followerTemp\n        );\n        inputs.connection = new boolean[]{leaderDebouncer.calculate(leaderStatus.isOK()), followerDebouncer.calculate(leaderStatus.isOK())};\n        inputs.supplyCurrentAmps =\n                new double[] {leaderSupplyCurrent.getValueAsDouble(), followerSupplyCurrent.getValueAsDouble()};\n        inputs.appliedVolts =\n                new double[] {leaderAppliedVoltage.getValueAsDouble(), followerAppliedVoltage.getValueAsDouble()};\n        inputs.tempCelsius = new double[] {leaderTemp.getValueAsDouble(), followerTemp.getValueAsDouble()};\n        inputs.statorCurrentAmps =\n                new double[] {leaderStatorCurrent.getValueAsDouble(), followerStatorCurrent.getValueAsDouble()};\n        inputs.positionMeters = new double[] {leaderPosition.getValueAsDouble(), followerPosition.getValueAsDouble()};\n        inputs.velocityMPS = new double[] {leaderVelocity.getValueAsDouble(), followerVelocity.getValueAsDouble()};\n        inputs.atUpperLimit = upperLimitSwitch.get();\n        inputs.atLowerLimit = lowerLimitSwitch.get();\n    }\n\n    public void setVoltage(double volts) {\n        leader.setVoltage(volts);\n        follower.setControl(followerControl);\n    }\n\n    public void setSetpoint(double setpointMeters) {\n        leader.setControl(profiledPositionControl.withPosition(setpointMeters));\n        follower.setControl(followerControl);\n    }\n\n    public void setBrakeMode(boolean brakeMode) {\n        leader.setNeutralMode(brakeMode ? NeutralModeValue.Brake : NeutralModeValue.Coast);\n        follower.setNeutralMode(brakeMode ? NeutralModeValue.Brake : NeutralModeValue.Coast);\n        // follower.setControl(followerControl);\n    }\n\n    public void configPID(double kP, double kI, double kD) {\n        Slot0Configs configs = new Slot0Configs();\n        leader.getConfigurator().refresh(configs);\n        configs.kP = kP;\n        configs.kI = kI;\n        configs.kD = kD;\n        leader.getConfigurator().apply(configs);\n        follower.setControl(followerControl);\n    }\n\n    public void configFF(double kS, double kV, double kG) {\n        Slot0Configs configs = new Slot0Configs();\n        leader.getConfigurator().refresh(configs);\n        configs.kS = kS;\n        configs.kV = kV;\n        configs.kG = kG;\n        leader.getConfigurator().apply(configs);\n        follower.setControl(followerControl);\n    }\n}\n
===================================================================
diff --git a/src/main/java/org/team1540/robot2025/subsystems/elevator/ElevatorIOTalonFX.java b/src/main/java/org/team1540/robot2025/subsystems/elevator/ElevatorIOTalonFX.java
--- a/src/main/java/org/team1540/robot2025/subsystems/elevator/ElevatorIOTalonFX.java	(revision 92ede2aafa1bcc5488ae1d3fdd347bc831e37574)
+++ b/src/main/java/org/team1540/robot2025/subsystems/elevator/ElevatorIOTalonFX.java	(date 1738735492676)
@@ -71,6 +71,8 @@
         config.MotionMagic.MotionMagicCruiseVelocity = 1;
         config.MotionMagic.MotionMagicAcceleration = 2;
 
+        
+
         leader.getConfigurator().apply(config);
         follower.getConfigurator().apply(config);
         follower.setControl(followerControl);
