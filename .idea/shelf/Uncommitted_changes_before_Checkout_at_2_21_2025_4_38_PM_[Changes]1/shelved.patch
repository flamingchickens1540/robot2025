Index: src/main/java/org/team1540/robot2025/subsystems/Superstructure.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.team1540.robot2025.subsystems;\r\n\r\nimport edu.wpi.first.wpilibj2.command.Command;\r\nimport edu.wpi.first.wpilibj2.command.Commands;\r\nimport java.util.function.BooleanSupplier;\r\nimport org.littletonrobotics.junction.AutoLogOutput;\r\nimport org.team1540.robot2025.subsystems.arm.Arm;\r\nimport org.team1540.robot2025.subsystems.elevator.Elevator;\r\nimport org.team1540.robot2025.subsystems.grabber.Grabber;\r\nimport org.team1540.robot2025.subsystems.intake.CoralIntake;\r\n\r\npublic class Superstructure {\r\n    private static boolean hasInstance = false;\r\n\r\n    public enum SuperstructureState {}\r\n\r\n    private final Elevator elevator;\r\n    private final Arm arm;\r\n    private final CoralIntake coralIntake;\r\n    private final Grabber grabber;\r\n\r\n    private SuperstructureState goalState;\r\n\r\n    public Superstructure(Elevator elevator, Arm arm, CoralIntake coralIntake, Grabber grabber) {\r\n        if (hasInstance) throw new IllegalStateException(\"Instance of arm already exists\");\r\n        hasInstance = true;\r\n        this.elevator = elevator;\r\n        this.arm = arm;\r\n        this.coralIntake = coralIntake;\r\n        this.grabber = grabber;\r\n    }\r\n\r\n    @AutoLogOutput(key = \"Superstructure/GoalState\")\r\n    public SuperstructureState getGoalState() {\r\n        return goalState;\r\n    }\r\n\r\n    public Command stow() {\r\n        return Commands.either(\r\n                Commands.sequence(\r\n                        arm.commandToSetpoint(Arm.ArmState.STOW_ALGAE),\r\n                        elevator.commandToSetpoint(Elevator.ElevatorState.STOW_ALGAE),\r\n                        coralIntake.commandToSetpoint(CoralIntake.CoralIntakeState.STOW)),\r\n                Commands.sequence(\r\n                        arm.commandToSetpoint(Arm.ArmState.STOW),\r\n                        elevator.commandToSetpoint(Elevator.ElevatorState.BASE),\r\n                        coralIntake.commandToSetpoint(CoralIntake.CoralIntakeState.STOW)),\r\n                grabber::hasAlgae);\r\n    }\r\n\r\n    public Command scoreCoral(\r\n            Elevator.ElevatorState elevatorPosition,\r\n            Arm.ArmState armPosition,\r\n            double grabberPower,\r\n            BooleanSupplier confirm) {\r\n        return Commands.sequence(\r\n                        arm.commandToSetpoint(Arm.ArmState.STOW),\r\n                        elevator.commandToSetpoint(elevatorPosition),\r\n                        arm.commandToSetpoint(armPosition),\r\n                        Commands.waitUntil(confirm),\r\n                        grabber.commandRun(grabberPower).until(() -> !grabber.hasCoral()),\r\n                        grabber.commandRun(grabberPower).withTimeout(0.1),\r\n                        stow())\r\n                .unless(grabber::hasAlgae);\r\n    }\r\n\r\n    public Command L2(BooleanSupplier confirm) {\r\n        return scoreCoral(Elevator.ElevatorState.L2, Arm.ArmState.SCORE, 0.5, confirm);\r\n    }\r\n\r\n    public Command L3(BooleanSupplier confirm) {\r\n        return scoreCoral(Elevator.ElevatorState.L3, Arm.ArmState.SCORE, 0.5, confirm);\r\n    }\r\n\r\n    public Command L4(BooleanSupplier confirm) {\r\n        return scoreCoral(Elevator.ElevatorState.L4, Arm.ArmState.L4_SCORE, 0.5, confirm);\r\n    }\r\n\r\n    public Command L2Reverse(BooleanSupplier confirm) {\r\n        return scoreCoral(Elevator.ElevatorState.L2, Arm.ArmState.SCORE_REVERSE, -0.5, confirm);\r\n    }\r\n\r\n    public Command L3Reverse(BooleanSupplier confirm) {\r\n        return scoreCoral(Elevator.ElevatorState.L3, Arm.ArmState.SCORE_REVERSE, -0.5, confirm);\r\n    }\r\n\r\n    public Command L4Reverse(BooleanSupplier confirm) {\r\n        return scoreCoral(Elevator.ElevatorState.L4, Arm.ArmState.L4_SCORE_REVERSE, -0.5, confirm);\r\n    }\r\n\r\n    public Command L1(BooleanSupplier confirm) {\r\n        return scoreCoral(Elevator.ElevatorState.L1, Arm.ArmState.L1_SCORE, -0.2, confirm);\r\n    }\r\n\r\n    public Command dealgifyLow() {\r\n        return Commands.sequence(\r\n                        arm.commandToSetpoint(Arm.ArmState.STOW),\r\n                        elevator.commandToSetpoint(Elevator.ElevatorState.LOW_ALGAE),\r\n                        arm.commandToSetpoint(Arm.ArmState.REEF_ALGAE),\r\n                        Commands.runOnce(() -> grabber.setPercent(0.25)),\r\n                        Commands.waitUntil(grabber::hasAlgae),\r\n                        stow())\r\n                .unless(grabber::hasCoral);\r\n    }\r\n\r\n    public Command dealgifyHigh() {\r\n        return Commands.sequence(\r\n                        arm.commandToSetpoint(Arm.ArmState.STOW),\r\n                        elevator.commandToSetpoint(Elevator.ElevatorState.HIGH_ALGAE),\r\n                        arm.commandToSetpoint(Arm.ArmState.REEF_ALGAE),\r\n                        Commands.runOnce(() -> grabber.setPercent(0.25)),\r\n                        Commands.waitUntil(grabber::hasAlgae),\r\n                        stow())\r\n                .unless(grabber::hasCoral);\r\n    }\r\n\r\n    public Command coralGroundIntake() {\r\n        return Commands.sequence(\r\n                        stow(),\r\n                        coralIntake.commandToSetpoint(CoralIntake.CoralIntakeState.INTAKE),\r\n                        arm.commandToSetpoint(Arm.ArmState.INTAKE),\r\n                        grabber.commandRun(0.3).alongWith(coralIntake.commandRunRollerFunnel(0.5, 0.5)),\r\n                        stow().alongWith(grabber.centerCoral()))\r\n                .unless(grabber::hasAlgae);\r\n    }\r\n\r\n    public Command sourceIntake() {\r\n        return Commands.sequence(\r\n                        arm.commandToSetpoint(Arm.ArmState.STOW),\r\n                        elevator.commandToSetpoint(Elevator.ElevatorState.SOURCE),\r\n                        arm.commandToSetpoint(Arm.ArmState.SOURCE_INTAKE),\r\n                        grabber.commandRun(0.5).until(grabber::hasCoral),\r\n                        stow())\r\n                .unless(grabber::hasAlgae);\r\n    }\r\n\r\n    public Command algaeIntake() {\r\n        return Commands.sequence(\r\n                        arm.commandToSetpoint(Arm.ArmState.STOW),\r\n                        elevator.commandToSetpoint(Elevator.ElevatorState.FLOOR_ALGAE),\r\n                        arm.commandToSetpoint(Arm.ArmState.FLOOR_ALGAE),\r\n                        Commands.runOnce(() -> grabber.setPercent(0.25)),\r\n                        Commands.waitUntil(grabber::hasAlgae),\r\n                        stow())\r\n                .unless(grabber::hasCoral);\r\n    }\r\n\r\n    public Command processor(BooleanSupplier confirm) {\r\n        return Commands.sequence(\r\n                        stow(),\r\n                        arm.commandToSetpoint(Arm.ArmState.PROCESSOR),\r\n                        Commands.waitUntil(confirm),\r\n                        grabber.commandRun(-0.5).withTimeout(0.5),\r\n                        stow())\r\n                .onlyIf(grabber::hasAlgae);\r\n    }\r\n\r\n    public Command net() {\r\n        return Commands.sequence(\r\n                arm.commandToSetpoint(Arm.ArmState.STOW_ALGAE),\r\n                elevator.commandToSetpoint(Elevator.ElevatorState.L3),\r\n                arm.commandToSetpoint(Arm.ArmState.SCORE_REVERSE),\r\n                Commands.parallel(\r\n                        elevator.commandToSetpoint(Elevator.ElevatorState.BARGE),\r\n                        arm.commandToSetpoint(Arm.ArmState.STOW_ALGAE),\r\n                        grabber.commandRun(-0.5).withTimeout(1)),\r\n                stow());\r\n        //                .onlyIf(grabber::hasAlgae);\r\n    }\r\n\r\n    public Command netReverse() {\r\n        return Commands.sequence(\r\n                arm.commandToSetpoint(Arm.ArmState.STOW_ALGAE),\r\n                Commands.parallel(\r\n                        elevator.commandToSetpoint(Elevator.ElevatorState.BARGE),\r\n                        Commands.parallel(\r\n                                        arm.commandToSetpoint(Arm.ArmState.SCORE_REVERSE),\r\n                                        grabber.commandRun(-0.5).withTimeout(1))\r\n                                .beforeStarting(Commands.waitSeconds(0.2))\r\n                                .beforeStarting(Commands.waitUntil(() ->\r\n                                        elevator.getPosition() > Elevator.ElevatorState.L3.height.getAsDouble()))),\r\n                stow());\r\n        //                .onlyIf(grabber::hasAlgae);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/team1540/robot2025/subsystems/Superstructure.java b/src/main/java/org/team1540/robot2025/subsystems/Superstructure.java
--- a/src/main/java/org/team1540/robot2025/subsystems/Superstructure.java	(revision ca30e9325c4cf3ecce13b3fa28a2b62757b7bd56)
+++ b/src/main/java/org/team1540/robot2025/subsystems/Superstructure.java	(date 1740184689959)
@@ -182,4 +182,6 @@
                 stow());
         //                .onlyIf(grabber::hasAlgae);
     }
+
+    
 }
